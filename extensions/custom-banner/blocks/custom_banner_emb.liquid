{% comment %}Custom Banner App Block{% endcomment %}

<div id="hex-banner-root"></div>

<style>
  .hex-banner-container {
    background-color: #000000;
    width: 100%;
    z-index: 999999;
  }

  .hex-banner-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    flex-direction: column;
    z-index: 999999;
    transition: transform 0.1s ease;
  }

  .hex-banner-wrapper.hide {
    transform: translateY(-100%);
  }

  .hex-banner-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
    min-height: 40px;
    padding: 10px 40px;
    width: 100%;
    box-sizing: border-box;
  }

  .hex-banner-text {
    color: #ffffff !important;
    font-size: 16px !important;
    margin: 0;
    text-align: center;
    font-family: inherit;
    line-height: 1.4;
    display: block !important;
    visibility: visible !important;
    flex: 1;
  }

  .hex-banner-actions {
    display: flex;
    align-items: center;
    gap: 20px;
    flex-shrink: 0;
  }

  .hex-banner-cta-wrapper {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .hex-banner-cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    transition: opacity 0.2s;
    white-space: nowrap;
    min-width: 80px;
    text-align: center;
    padding: 5px 15px;
  }

  .hex-banner-cta:hover {
    opacity: 0.9;
  }

  .hex-banner-close {
    background: none;
    border: none;
    color: #ffffff;
    cursor: pointer;
    padding: 5px;
    font-size: 18px;
    opacity: 0.7;
    transition: opacity 0.2s;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hex-banner-close.right {
    right: 5px;
  }

  .hex-banner-close.left {
    left: 5px;
  }

  .hex-banner-close:hover {
    opacity: 1;
  }

  /* Adjust body padding to prevent banner overlap */
  body {
    transition: padding-top 0.3s ease;
  }

  @media screen and (max-width: 768px) {
    .hex-banner-content {
      padding: 8px 35px;
    }

    .hex-banner-text {
      font-size: 14px !important;
    }

    .hex-banner-actions {
      gap: 15px;
    }

    .hex-banner-cta-wrapper {
      gap: 8px;
    }

    .hex-banner-cta {
      font-size: 12px;
      min-width: 60px;
      padding: 4px 10px;
    }

    .hex-banner-close {
      font-size: 16px;
      width: 25px;
      height: 25px;
    }
  }

  @media screen and (max-width: 480px) {
    .hex-banner-content {
      flex-direction: column;
      padding: 10px 35px;
      gap: 8px;
      align-items: center;
    }

    .hex-banner-text {
      text-align: center;
      width: 100%;
    }

    .hex-banner-actions {
      width: 100%;
      justify-content: center;
      gap: 15px;
    }

    .hex-banner-cta-wrapper {
      justify-content: center;
    }
  }
</style>

<script>
  (function() {
    // Constants
    const CONFIG = {
      API_URL: 'https://custombanner.hexstore.io',
      SCROLL_THRESHOLD: 50,
      DEBUG: false, // Set to true to see time zone debugging information
      DEFAULT_STYLES: {
        backgroundColor: '#000000',
        textColor: '#ffffff',
        fontSize: 16,
        padding: '10px 0'
      }
    };

    /**
     * @typedef {Object} KVAnnouncement
     * @property {string} id - Unique identifier
     * @property {string} type - Banner type ('basic', 'multi_text', 'countdown', 'email_signup')
     * @property {string} title - Campaign title
     * @property {string} shopId - Shop identifier
     * @property {string} size - Banner size ('small', 'mid', 'large', 'custom')
     * @property {'now' | 'specific'} startType - How the banner starts
     * @property {'until_stop' | 'specific'} endType - How the banner ends
     * @property {string} startDate - ISO date string for start
     * @property {string} endDate - ISO date string for end
     * @property {string} closeButtonPosition - Position of close button ('left', 'right', 'none')
     * @property {boolean} showCloseButton - Whether to show close button
     * @property {boolean} isActive - Whether banner is active
     * @property {TextSettings[]} texts - Array of text settings
     * @property {BackgroundSettings|null} background - Background settings
     */

    /**
     * @typedef {Object} TextSettings
     * @property {string} textMessage - The message text
     * @property {string} textColor - Hex color code for text
     * @property {number} fontSize - Font size in pixels
     * @property {string} fontType - Font type ('site', 'dynamic', 'custom')
     * @property {string} [fontUrl] - URL to custom font
     * @property {string} [customFont] - Custom font family name
     * @property {CTASettings[]} [ctas] - Call-to-action buttons
     */

    /**
     * @typedef {Object} CTASettings
     * @property {string} text - Button text
     * @property {string} link - Button link URL
     * @property {string} [bgColor] - Background color
     * @property {string} [textColor] - Text color
     * @property {number} [buttonRadius] - Border radius in pixels
     * @property {string} [padding] - CSS padding value
     */

    /**
     * @typedef {Object} BackgroundSettings
     * @property {string} backgroundColor - Main background color
     * @property {string} [color2] - Secondary color for gradients
     * @property {string} [backgroundType] - 'solid' or 'gradient'
     * @property {string} [pattern] - Background pattern
     * @property {string} [padding] - CSS padding value
     */

    /**
     * @typedef {Object} AnnouncementKVData
     * @property {KVAnnouncement[]} global - Global announcements
     * @property {string[]} __patterns - Pattern keys
     * @property {KVAnnouncement[]} [key: string] - Dynamic keys for paths or patterns
     */

    // Banner Service - Handles banner data fetching and processing
    class BannerService {
      constructor(shop) {
        this.shop = shop;
      }

      /**
       * Fetches banner data from the API
       * @returns {Promise<AnnouncementKVData|null>}
       */
      async fetchBannerData() {
        try {
          // Make API request to get banner data for the shop
          const response = await fetch(`${CONFIG.API_URL}/${this.shop}`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });

          // Parse and return the AnnouncementKVData response
          return await response.json();
        } catch (error) {
          console.error('Custom Banner Error:', error);
          return null;
        }
      }
    }

    // Path Matcher - Handles URL pattern matching
    class PathMatcher {
      static normalizePattern(pattern) {
        return pattern.replace(/^\/|\/$/g, '');
      }

      static createRegexPattern(pattern) {
        return pattern
          .replace(/\//g, '\\/')
          .replace(/\*/g, '[^/]*');
      }

      static match(currentPath, pattern) {
        const normalizedPath = this.normalizePattern(currentPath);
        const normalizedPattern = this.normalizePattern(pattern);
        const regexPattern = this.createRegexPattern(normalizedPattern);
        const regex = new RegExp(`^${regexPattern}$`);
        return regex.test(normalizedPath);
      }
    }

    // Announcement Selector - Handles announcement selection based on priority
    class AnnouncementSelector {
      /** @type {AnnouncementKVData} */
      data; // AnnouncementKVData from the API
      /** @type {string} */
      currentPath;

      /**
       * @param {AnnouncementKVData} data - The banner data from API
       * @param {string} currentPath - Current page path
       */
      constructor(data, currentPath) {
        this.data = data;
        this.currentPath = currentPath;
      }

      /**
       * Gets announcements that exactly match the current path
       * Paths in data are stored with / replaced by _0x2F_ for compatibility
       * @returns {KVAnnouncement[]} Array of exact matching announcements
       */
      getExactPathAnnouncements() {
        const exactPath = this.currentPath.replace(/\//g, '_0x2F_');
        return Array.isArray(this.data[exactPath]) ? this.data[exactPath] : [];
      }

      /**
       * Gets announcements that match a pattern (like /products/*)
       * @returns {KVAnnouncement[]} Array of pattern matching announcements
       */
      getPatternAnnouncements() {
        if (!Array.isArray(this.data.__patterns)) return [];

        const sortedPatterns = this.getSortedPatterns();
        for (const pattern of sortedPatterns) {
          const cleanPattern = pattern.replace('_0x2F_', '/').replace('_0x2A_', '*');
          if (PathMatcher.match(this.currentPath, cleanPattern)) {
            if (Array.isArray(this.data[pattern]) && this.data[pattern].length > 0) {
              return this.data[pattern];
            }
          }
        }
        return [];
      }

      /**
       * Gets global announcements that show on all pages
       * @returns {KVAnnouncement[]} Array of global announcements
       */
      getGlobalAnnouncements() {
        return Array.isArray(this.data.global) ? this.data.global : [];
      }

      /**
       * Sorts patterns by specificity (most specific first)
       * @returns {string[]} Sorted pattern array
       */
      getSortedPatterns() {
        return [...this.data.__patterns].sort((a, b) => {
          const aSpecificity = (a.match(/\//g) || []).length + (a.match(/[^*/]+/g) || []).length;
          const bSpecificity = (b.match(/\//g) || []).length + (b.match(/[^*/]+/g) || []).length;
          return bSpecificity - aSpecificity;
        });
      }

      /**
       * Selects announcements in priority order
       * @returns {KVAnnouncement[]} Selected announcements for current page
       */
      selectAnnouncements() {
        // Check in priority order: exact path > pattern > global
        const exactPathAnnouncements = this.getExactPathAnnouncements();
        if (exactPathAnnouncements.length > 0) return exactPathAnnouncements;

        const patternAnnouncements = this.getPatternAnnouncements();
        if (patternAnnouncements.length > 0) return patternAnnouncements;

        return this.getGlobalAnnouncements();
      }
    }

    // Banner UI - Handles banner creation and DOM manipulation
    class BannerUI {
      wrapper;
      constructor() {
        this.wrapper = this.createWrapper();
        this.setupScrollBehavior();
      }

      createWrapper() {
        const wrapper = document.createElement('div');
        wrapper.className = 'hex-banner-wrapper';
        document.body.insertBefore(wrapper, document.body.firstChild);
        return wrapper;
      }

      setupScrollBehavior() {
        let lastScrollTop = 0;
        window.addEventListener('scroll', () => {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          if (scrollTop > CONFIG.SCROLL_THRESHOLD && scrollTop > lastScrollTop) {
            this.wrapper.classList.add('hide');
          } else {
            this.wrapper.classList.remove('hide');
          }
          lastScrollTop = scrollTop;
        });
      }

      /**
       * Creates a banner element from announcement data
       * @param {KVAnnouncement} announcement - The announcement data
       * @returns {HTMLDivElement} - The created banner element
       */
      createBanner(announcement) {
        const banner = document.createElement('div');
        banner.className = 'hex-banner-container';

        /** @type {TextSettings} */
        const text = announcement.texts[0];
        /** @type {BackgroundSettings|null} */
        const background = announcement.background;

        banner.style.backgroundColor = background?.backgroundColor || CONFIG.DEFAULT_STYLES.backgroundColor;

        // Apply padding from API if available
        if (background?.padding) {
          banner.style.padding = background.padding;
        }

        const content = this.createBannerContent(text, announcement);
        banner.appendChild(content);
        return banner;
      }

      createBannerContent(text, announcement) {
        const content = document.createElement('div');
        content.className = 'hex-banner-content';

        const textElement = this.createTextElement(text);
        content.appendChild(textElement);

        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'hex-banner-actions';

        if (text?.ctas?.length > 0) {
          const ctaWrapper = document.createElement('div');
          ctaWrapper.className = 'hex-banner-cta-wrapper';

          text.ctas.forEach(cta => {
            ctaWrapper.appendChild(this.createCTAButton(cta));
          });

          actionsDiv.appendChild(ctaWrapper);
        }

        if (announcement.showCloseButton) {
          actionsDiv.appendChild(this.createCloseButton(announcement.closeButtonPosition));
        }

        content.appendChild(actionsDiv);
        return content;
      }

      createTextElement(text) {
        const textElement = document.createElement('p');
        textElement.className = 'hex-banner-text';
        textElement.style.color = text?.textColor || CONFIG.DEFAULT_STYLES.textColor;
        textElement.style.fontSize = `${text?.fontSize || CONFIG.DEFAULT_STYLES.fontSize}px`;
        textElement.textContent = text?.textMessage || '';

        // Apply custom font if available
        if (text?.customFont) {
          textElement.style.fontFamily = text.customFont;
        }

        return textElement;
      }

      createCTAButton(cta) {
        const ctaButton = document.createElement('a');
        ctaButton.href = cta.link || '#';
        ctaButton.className = 'hex-banner-cta';
        ctaButton.textContent = cta.text || '';

        // Apply CTA styles from API
        ctaButton.style.backgroundColor = cta.bgColor || CONFIG.DEFAULT_STYLES.textColor;
        ctaButton.style.color = cta.textColor || CONFIG.DEFAULT_STYLES.backgroundColor;
        ctaButton.style.borderRadius = `${cta.buttonRadius || 4}px`;

        // Apply padding from API if available
        if (cta.padding && cta.padding !== '0px 0px 0px 0px') {
          ctaButton.style.padding = cta.padding;
        } else {
          ctaButton.style.padding = '5px 15px';
        }

        return ctaButton;
      }

      createCloseButton(position = 'right') {
        const closeButton = document.createElement('button');
        closeButton.className = `hex-banner-close ${position}`;
        closeButton.innerHTML = '✕';
        closeButton.onclick = (e) => {
          const banner = e.target.closest('.hex-banner-container');
          if (banner) banner.remove();
          this.updateBodyPadding();
        };
        return closeButton;
      }

      updateBodyPadding() {
        const banners = document.querySelectorAll('.hex-banner-container');
        let totalHeight = 0;
        banners.forEach(banner => {
          totalHeight += banner.offsetHeight;
        });
        document.body.style.paddingTop = `${totalHeight}px`;
      }

      /**
       * Converts UTC date string to user's local time
       * @param {string} dateString - ISO date string from API
       * @returns {Date} - Date object in user's local time
       */
      getLocalDate(dateString) {
        // Parse the date string to a Date object
        // This automatically converts to the user's local time zone
        return new Date(dateString);
      }

      /**
       * Checks if a banner should be displayed based on time constraints
       * @param {KVAnnouncement} announcement - The announcement to check
       * @returns {boolean} - Whether the banner should be displayed
       */
      isWithinTimeWindow(announcement) {
        // Get current time in user's local time zone
        const now = new Date();

        // Convert announcement dates to user's local time zone
        const start = this.getLocalDate(announcement.startDate);
        const end = this.getLocalDate(announcement.endDate);

        // Debug time information if needed
        if (CONFIG.DEBUG) {
          console.log('Banner Time Check:', {
            bannerTitle: announcement.title,
            userTime: now.toLocaleString(),
            userTimeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            startTime: start.toLocaleString(),
            endTime: end.toLocaleString(),
            isActive: announcement.isActive,
            isAfterStart: now >= start,
            isBeforeEnd: now <= end
          });
        }

        return announcement.isActive && now >= start && now <= end;
      }

      /**
       * Displays announcements from the data
       * @param {KVAnnouncement[]} announcements - Announcements selected for display
       */
      displayAnnouncements(announcements) {
        let addedBanners = 0;

        announcements.forEach(announcement => {
          // Check if the announcement should be displayed based on time
          if (this.isWithinTimeWindow(announcement)) {
            const banner = this.createBanner(announcement);
            if (banner) {
              this.wrapper.appendChild(banner);
              addedBanners++;
            }
          }
        });

        if (addedBanners > 0) {
          setTimeout(() => this.updateBodyPadding(), 100);
        }

        window.addEventListener('resize', () => this.updateBodyPadding());
      }
    }

    /**
     * Main initialization function - Fetches data and displays banners
     *
     * Data flow:
     * 1. Fetch AnnouncementKVData from API
     * 2. Select applicable announcements based on current path
     * 3. Display selected announcements in the UI
     */
    async function initBanners() {
      const shop = Shopify.shop;
      const currentPath = window.location.pathname;

      // Create the banner service and UI
      const bannerService = new BannerService(shop);
      const bannerUI = new BannerUI();

      // Fetch AnnouncementKVData from the API
      const data = await bannerService.fetchBannerData();
      if (!data) return; // Exit if no data is returned

      // Select applicable announcements based on current path
      const selector = new AnnouncementSelector(data, currentPath);
      const selectedAnnouncements = selector.selectAnnouncements();

      // Display the selected announcements
      bannerUI.displayAnnouncements(selectedAnnouncements);
    }

    // Start the application
    initBanners();
  })();
</script>

{% schema %}
{
  "name": "Custom Banner",
  "target": "body",
  "settings": []
}
{% endschema %}

